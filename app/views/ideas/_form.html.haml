= semantic_form_for @idea, :html => {:multipart => true} do |f|

  = f.inputs do
    
    .form-group
      .col-md-11.col-md-offset-1



      -# f.inputs :partial do
        = form.input :user_id , :as => :select, :collection => @users
        , html: {method: :post, :id => 'new_idea'} 
      -# *******************

      = f.input :title, :label => t(:title, scope: "activerecord.attributes.idea"), autofocus: true,  :input_html => {:class => "form-control ", :maxlength => 40}, :required => false, placeholder: "название идеи (не более 40 символов)"
      %br
      = f.input :synopsis, as: :text, :label => t(:synopsis, scope: "activerecord.attributes.idea"), autofocus: true,  :input_html => {:class => "form-control ", :rows => 3, :maxlength => 150}, :required => false, placeholder: "напишите коротко об идее (не более 150 символов)"
      %br
      = f.input :category_id, :as => :select, :collection => Hash[Category.all.map{|b| [b.name,b.id]}], :include_blank => false, :label => "Категория", autofocus: true, :input_html => {:class => "form-control"}, :required => false
      %br
      = f.input :problem, as: :text, :label => t(:problem, scope: "activerecord.attributes.idea"), autofocus: true,  :input_html => {:class => "form-control ", :rows => 7, :maxlength => 2500}, :required => false, placeholder: "опишите проблему, при решении которой родилась Ваша идея (не более 2500 символов)"
      %br
      = f.input :background, as: :text, :label => t(:background, scope: "activerecord.attributes.idea"), autofocus: true,  :input_html => {:class => "form-control ", :rows => 7, :maxlength => 2500}, :required => false, placeholder: "опишите существующие возможные аналоги Вашей идеи или изобретения (не более 2500 символов)"
      %br
      = f.input :solution, as: :text, :label => t(:solution, scope: "activerecord.attributes.idea"), autofocus: true,  :input_html => {:class => "form-control ", :rows => 7, :maxlength => 2500}, :required => false, placeholder: "напишите коротко опишите суть идеи (не более 2500 символов)"
      %br

      #new_assets
        
          

        / = form_for Asset.new, :html => { :multipart => true, :id => "fileupload"  } do |f|
        / The fileupload-buttonbar contains buttons to add/delete files and start/cancel the upload
        .row.fileupload-buttonbar
          .col-md-10.col-md-offset-1
            / The fileinput-button span is used to style the file input field as button
            %span.btn.btn-success.btn-sm.fileinput-button
              %i.icon-plus.icon-white
              %span Add files...
              = f.file_field :upload
            %span.btn.btn-primary.btn-sm.start{:type => "submit"}
              %i.icon-upload.icon-white
              %span Загрузить
            %span.btn.btn-warning.btn-sm.cancel{:type => "reset"}
              %i.icon-ban-circle.icon-white
              %span Отменить
            %span.btn.btn-danger.btn-sm.delete{:type => "button"}
              %i.icon-trash.icon-white
              %span Удалить
            %input.toggle{:type => "checkbox"}/
          .span5
            / The global progress bar
            .progress.progress-success.progress-striped.active.fade
              .bar{:style => "width:0%;"}
        / The loading indicator is shown during image processing
        .fileupload-loading
        %br/
        / The table listing the files available for upload/download
        %table.table.table-striped
          %tbody.files{"data-target" => "#modal-gallery", "data-toggle" => "modal-gallery"}




            = f.semantic_errors :base, class: 'inline-errors'

            = f.semantic_fields_for :assets, :id => "fileupload" do |builder|
              -#
                = builder.file_field :attachment, multiple: true,  autofocus: true, :required => true, :class => "loadbtn"
              - if builder.object.new_record?
                = builder.file_field :data
              -#  
                -unless builder.object.new_record?
                  .thumbnail

                    = link_to( image_tag(builder.object.url(:thumb)), builder.object.url(:large) )
                    
                    = builder.check_box :delete
                
                
      -#

        = f.semantic_fields_for :assets do |builder|
          - unless builder.object.new_record?
            = builder.input :_destroy, :as => :boolean,             |
              :label => image_tag(builder.object.image.url(:thumb)) |
          - else
            = builder.input :image, :as => :file, :name => "Add Image"
        

      = f.input :links, :label => t(:links, scope: "activerecord.attributes.idea"), autofocus: true,  :input_html => {:class => "form-control ", :rows => 3, :maxlength => 1000}, :required => false, placeholder: "вставьте ссылку на видео - необязательное поле (не более 150 символов)"
      %br

      -#
        
        = f.input :show_skype, :as => :boolean, autofocus: true, :required => false
        = f.input :odnoklassniki, autofocus: true, :input_html => {:class => "form-control"}, :required => false, placeholder: "ok.ru/yourpage"

  = f.actions do
    .form-group
      .col-md-12 
        %br
        = f.submit action, :class => "input btn btn-primary"
        &nbsp
        &nbsp
        &nbsp
        = link_to "Отмена", :back, :class => "input btn backbtn"
        = f.submit "Опубликовать", :class => "input btn btn-primary pull-right"

